// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String          @id @default(cuid())
    name                   String?
    email                  String?         @unique
    emailVerified          DateTime?
    image                  String?
    accounts               Account[]
    sessions               Session[]
    pets                   Pet[]
    jobs                   Job[]
    sentFriendRequests     FriendRequest[] @relation("senderRelation")
    receivedFriendRequests FriendRequest[] @relation("receiverRelation")
    friends                User[]          @relation("friends")
    friendsRelation        User[]          @relation("friends")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Pet {
    id      String   @id @default(cuid())
    userId  String
    name    String
    type    String
    breed   String
    born_at DateTime
    image   String?
    bio     String?
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    jobs    Job[]

    @@unique([id])
}

model PetType {
    id     String @id @default(cuid())
    name   String
    breeds String @db.VarChar(5000)
}

model FriendRequest {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    accepted   Boolean  @default(false)
    senderId   String
    sender     User     @relation(name: "senderRelation", fields: [senderId], references: [id])
    receiverId String
    receiver   User     @relation(name: "receiverRelation",fields: [receiverId], references: [id])

    @@unique([id])
}


model Job {
    id            String  @id @default(cuid())
    petId         String
    pet           Pet     @relation(fields: [petId], references: [id], onDelete: Cascade)
    userId        String
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    title         String
    description   String  @db.VarChar(5000)
    price         Float
    status        String
    contactEmail  String?
    contactNumber String?
}
